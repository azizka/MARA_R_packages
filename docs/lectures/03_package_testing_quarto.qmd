---
title: "Package testing"
# title-slide-attributes:
#     data-background-image: ./pictures/Rlogo.svg
#     data-background-size: 50%
#     data-background-opacity: "0.5"
format: 
  revealjs:
    theme: serif
    highlight-style: gruvbox
    # logo: logo.png
    # footer: "Footer text"format:
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

library(checkmate)
```

## What is "testing"

::: incremental

1.  checks
2.  assertions
3.  tests

:::

## 1. checks

`devtools::check()`

. . .

<br>

run a range of diagnostic checks to ensure validity of the package (setup, metadata)

. . .

make sure that examples can be run

. . .

however ...

## Invalid arguments?

```{r}
greet <- function(whom){
  out <- paste0("Hello '", whom, "'!")
  return(out)
}
```

. . .

<br>

```{r}
aList <- list(people = c("Amelie", "Peter"), animals = c("my cat"))
```

. . .

<br>

```{r}
greet(whom = aList)
```

## Invalid arguments!

```{r}
report_summary <- function(data, measure, na.rm = TRUE, 
                           quantiles = NULL){
  
  if(measure == "mean"){
    out <- mean(x = data, na.rm = na.rm)
  } else if(measure == "median"){
    out <- median(x = data, na.rm = na.rm)  
  }
  out <- round(x = out, digits = 2)
  
  if(!is.null(quantiles)){
    out <- c(out, quantile(data, probs = quantiles, na.rm = na.rm))
  }
  names(out)[1] <- measure
  
  return(out)
}
```

## Invalid arguments!

```{r, error=TRUE}
report_summary(data = iris, measure = "median")
```

. . .

<br>

```{r, error=TRUE}
report_summary(data = iris$Sepal.Length, measure = "sd")
```

## 2. assertions

`checkmate::assert*()`

. . .

<br>

make sure that arguments fullfil a set of expectations, otherwise throw an error.

. . .

standardised interface, where specific argument types require specific options.

## 2. assertions

`assertVector` -\> Check if an argument is a vector

. . .

```{r, error=TRUE}
data <- iris
assertVector(x = data)
```

. . .

<br>

```{r, error=TRUE}
assertVector(x = data, strict = TRUE)
```

## 2. assertions

`assertChoice` -\> Check if an object is an element of a given set

. . .

```{r, error=TRUE}
measure <- NULL
assertChoice(x = measure, choices = c("mean", "median"), null.ok = TRUE)
```

. . .

<br>

```{r, error=TRUE}
measure <- "sd"
assertChoice(x = measure, choices = c("mean", "median"), null.ok = TRUE)
```

## 2. assertions

`assertLogical` -\> Check if an argument is a vector of type logical

. . .

```{r, error=TRUE}
na.rm <- NA
assertLogical(x = na.rm)
```

. . .

<br>

```{r, error=TRUE}
assertLogical(x = na.rm, any.missing = FALSE)
```

## 2. assertions

`assertNumeric` -\> Check that an argument is a vector of type numeric

. . .

```{r, error=TRUE}
quantiles <- c(0, 0.5, NA, 2)
assertNumeric(x = quantiles, lower = 0, upper = 1, any.missing = FALSE)
```

. . .

<br>

```{r, error=TRUE}
quantiles <- c(0, 0.5, 2)
assertNumeric(x = quantiles, lower = 0, upper = 1, any.missing = FALSE)
```

## 2. assertions

```{r}
report_summary <- function(data, measure, na.rm = TRUE, 
                           quantiles = NULL){
  
  assertVector(x = data, strict = TRUE)
  assertChoice(x = measure, choices = c("mean", "median"))
  assertLogical(x = na.rm, any.missing = FALSE, len = 1)
  assertNumeric(x = quantiles, lower = 0, upper = 1, 
                any.missing = FALSE, null.ok = TRUE)
  
  if(measure == "mean"){
    out <- mean(x = data, na.rm = na.rm)
  } else if(measure == "median"){
    out <- median(x = data, na.rm = na.rm)  
  }
  out <- round(x = out, digits = 2)
  
  if(!is.null(quantiles)){
    out <- c(out, quantile(data, probs = quantiles, na.rm = na.rm))
  }
  names(out)[1] <- c(measure)
  
  return(out)
}
```

## 2. assertions

```{r, error=TRUE}
report_summary(data = iris, measure = "median")
```

. . .

<br>

```{r, error=TRUE}
report_summary(data = iris$Sepal.Length, measure = "sd")
```

## 3. tests

initiate testing with `usethis::use_testthat()` <br>

. . .

make a test with `usethis::use_test()`

. . .

set up expectations for your functions and compare them against the status quo.

## 3. tests

```{r, eval=FALSE}
use_test("greet")
```

. . .

this opens a new file, in which we find a first test

```{r, eval=FALSE}
test_that("multiplication works", {
  expect_equal(object = 2 * 2, expected = 4)
})
```

. . .

change that to

```{r, eval=FALSE}
test_that("output is a character string", {
  out <- greet(whom = "World")
  expect_character(x = out, len = 1, pattern = "Hello.*!")
})
```

## 3. tests

Finally, run `test()` in the console and get information on how your tests are performing!
